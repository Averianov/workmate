// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * WorkMate Task Manager API
 *
 * API для управления длительными I/O задачами
 *
 * API version: 1.0.0
 * Contact: support@example.com
 */

package openapi

import (
	"context"
	"workmate/internal"
	"workmate/pkg"
)

// TasksAPIService is a service that implements the logic for the TasksAPIServicer
// This service should implement the business logic for every endpoint for the TasksAPI API.
// Include any external packages or services that will be required by this service.
type TasksAPIService struct {
	service *internal.Service
}

// NewTasksAPIService creates a default api service
func NewTasksAPIService() *TasksAPIService {
	return &TasksAPIService{
		service: internal.NewService(),
	}
}

// GetTasks - Получить список всех задач
func (s *TasksAPIService) GetTasks(ctx context.Context) (ImplResponse, error) {
	tasks, err := s.service.GetTasks(ctx)
	if err != nil {
		return Response(500, ErrorResponse{Error: err.Error()}), nil
	}

	apiTasks := MapInternalTasksToAPI(tasks)
	return Response(200, TaskListResponse{Tasks: apiTasks}), nil
}

// CreateTask - Создать новую задачу
func (s *TasksAPIService) CreateTask(ctx context.Context, createTaskRequest CreateTaskRequest) (ImplResponse, error) {
	task, err := s.service.CreateTask(ctx, createTaskRequest.Name)
	if err != nil {
		if err.Error() == pkg.TaskErrorNameRequired {
			return Response(400, ErrorResponse{Error: err.Error()}), nil
		}
		return Response(500, ErrorResponse{Error: err.Error()}), nil
	}

	apiTask := MapInternalTaskToAPI(task)
	return Response(201, TaskResponse{Task: apiTask}), nil
}

// GetTask - Получить информацию о задаче
func (s *TasksAPIService) GetTask(ctx context.Context, taskId string) (ImplResponse, error) {
	task, err := s.service.GetTask(ctx, taskId)
	if err != nil {
		return Response(404, ErrorResponse{Error: err.Error()}), nil
	}

	apiTask := MapInternalTaskToAPI(task)
	return Response(200, TaskResponse{Task: apiTask}), nil
}

// DeleteTask - Удалить задачу
func (s *TasksAPIService) DeleteTask(ctx context.Context, taskId string) (ImplResponse, error) {
	err := s.service.DeleteTask(ctx, taskId)
	if err != nil {
		return Response(404, ErrorResponse{Error: err.Error()}), nil
	}

	return Response(204, nil), nil
}

// GetTaskResult - Получить результат задачи
func (s *TasksAPIService) GetTaskResult(ctx context.Context, taskId string) (ImplResponse, error) {
	task, err := s.service.GetTaskResult(ctx, taskId)
	if err != nil {
		if err.Error() == pkg.TaskErrorNotFound {
			return Response(404, ErrorResponse{Error: err.Error()}), nil
		}
		if err.Error() == pkg.TaskErrorNotCompleted {
			return Response(425, ErrorResponse{Error: err.Error()}), nil
		}
		return Response(500, ErrorResponse{Error: err.Error()}), nil
	}

	apiTask := MapInternalTaskToAPI(task)
	return Response(200, TaskResponse{Task: apiTask}), nil
}
