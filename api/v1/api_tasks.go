// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * WorkMate Task Manager API
 *
 * API для управления длительными I/O задачами
 *
 * API version: 1.0.0
 * Contact: support@example.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// TasksAPIController binds http requests to an api service and writes the service results to the http response
type TasksAPIController struct {
	service TasksAPIServicer
	errorHandler ErrorHandler
}

// TasksAPIOption for how the controller is set up.
type TasksAPIOption func(*TasksAPIController)

// WithTasksAPIErrorHandler inject ErrorHandler into controller
func WithTasksAPIErrorHandler(h ErrorHandler) TasksAPIOption {
	return func(c *TasksAPIController) {
		c.errorHandler = h
	}
}

// NewTasksAPIController creates a default api controller
func NewTasksAPIController(s TasksAPIServicer, opts ...TasksAPIOption) *TasksAPIController {
	controller := &TasksAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the TasksAPIController
func (c *TasksAPIController) Routes() Routes {
	return Routes{
		"GetTasks": Route{
			"GetTasks",
			strings.ToUpper("Get"),
			"/api/v1/tasks",
			c.GetTasks,
		},
		"CreateTask": Route{
			"CreateTask",
			strings.ToUpper("Post"),
			"/api/v1/tasks",
			c.CreateTask,
		},
		"GetTask": Route{
			"GetTask",
			strings.ToUpper("Get"),
			"/api/v1/tasks/{taskId}",
			c.GetTask,
		},
		"DeleteTask": Route{
			"DeleteTask",
			strings.ToUpper("Delete"),
			"/api/v1/tasks/{taskId}",
			c.DeleteTask,
		},
		"GetTaskResult": Route{
			"GetTaskResult",
			strings.ToUpper("Get"),
			"/api/v1/tasks/{taskId}/result",
			c.GetTaskResult,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the TasksAPIController
func (c *TasksAPIController) OrderedRoutes() []Route {
	return []Route{
		Route{
			"GetTasks",
			strings.ToUpper("Get"),
			"/api/v1/tasks",
			c.GetTasks,
		},
		Route{
			"CreateTask",
			strings.ToUpper("Post"),
			"/api/v1/tasks",
			c.CreateTask,
		},
		Route{
			"GetTask",
			strings.ToUpper("Get"),
			"/api/v1/tasks/{taskId}",
			c.GetTask,
		},
		Route{
			"DeleteTask",
			strings.ToUpper("Delete"),
			"/api/v1/tasks/{taskId}",
			c.DeleteTask,
		},
		Route{
			"GetTaskResult",
			strings.ToUpper("Get"),
			"/api/v1/tasks/{taskId}/result",
			c.GetTaskResult,
		},
	}
}



// GetTasks - Получить список всех задач
func (c *TasksAPIController) GetTasks(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetTasks(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateTask - Создать новую задачу
func (c *TasksAPIController) CreateTask(w http.ResponseWriter, r *http.Request) {
	var createTaskRequestParam CreateTaskRequest
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createTaskRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateTaskRequestRequired(createTaskRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateTaskRequestConstraints(createTaskRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateTask(r.Context(), createTaskRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetTask - Получить информацию о задаче
func (c *TasksAPIController) GetTask(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	taskIdParam := params["taskId"]
	if taskIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"taskId"}, nil)
		return
	}
	result, err := c.service.GetTask(r.Context(), taskIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteTask - Удалить задачу
func (c *TasksAPIController) DeleteTask(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	taskIdParam := params["taskId"]
	if taskIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"taskId"}, nil)
		return
	}
	result, err := c.service.DeleteTask(r.Context(), taskIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetTaskResult - Получить результат задачи
func (c *TasksAPIController) GetTaskResult(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	taskIdParam := params["taskId"]
	if taskIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"taskId"}, nil)
		return
	}
	result, err := c.service.GetTaskResult(r.Context(), taskIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
